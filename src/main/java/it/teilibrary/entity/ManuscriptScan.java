package it.teilibrary.entity;
// Generated 9-set-2016 11.00.18 by Hibernate Tools 4.3.1


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * ManuscriptScan generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name="manuscript_scan"
    ,catalog="mydb"
)
public class ManuscriptScan  implements java.io.Serializable {


     private Integer idmanuscriptScan;
     private Manuscript manuscript;
     private User user;
     private Date scanTime;
     private byte[] imageScan;
     private String imageDescription;
     private Boolean pubblication;
     private Set<ManuscriptTranscription> manuscriptTranscriptions = new HashSet<ManuscriptTranscription>(0);

    public ManuscriptScan() {
    }

	
    public ManuscriptScan(Manuscript manuscript, User user) {
        this.manuscript = manuscript;
        this.user = user;
    }
    public ManuscriptScan(Manuscript manuscript, User user, Date scanTime, byte[] imageScan, String imageDescription, Boolean pubblication, Set<ManuscriptTranscription> manuscriptTranscriptions) {
       this.manuscript = manuscript;
       this.user = user;
       this.scanTime = scanTime;
       this.imageScan = imageScan;
       this.imageDescription = imageDescription;
       this.pubblication = pubblication;
       this.manuscriptTranscriptions = manuscriptTranscriptions;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="idmanuscript_scan", unique=true, nullable=false)
    public Integer getIdmanuscriptScan() {
        return this.idmanuscriptScan;
    }
    
    public void setIdmanuscriptScan(Integer idmanuscriptScan) {
        this.idmanuscriptScan = idmanuscriptScan;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="manuscript_idmanuscript", nullable=false)
    public Manuscript getManuscript() {
        return this.manuscript;
    }
    
    public void setManuscript(Manuscript manuscript) {
        this.manuscript = manuscript;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumns( { 
        @JoinColumn(name="user_username", referencedColumnName="username", nullable=false), 
        @JoinColumn(name="user_role_idrole", referencedColumnName="role_idrole", nullable=false) } )
    public User getUser() {
        return this.user;
    }
    
    public void setUser(User user) {
        this.user = user;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="scan_time", length=19)
    public Date getScanTime() {
        return this.scanTime;
    }
    
    public void setScanTime(Date scanTime) {
        this.scanTime = scanTime;
    }

    
    @Column(name="image_scan")
    public byte[] getImageScan() {
        return this.imageScan;
    }
    
    public void setImageScan(byte[] imageScan) {
        this.imageScan = imageScan;
    }

    
    @Column(name="image_description", length=45)
    public String getImageDescription() {
        return this.imageDescription;
    }
    
    public void setImageDescription(String imageDescription) {
        this.imageDescription = imageDescription;
    }

    
    @Column(name="pubblication")
    public Boolean getPubblication() {
        return this.pubblication;
    }
    
    public void setPubblication(Boolean pubblication) {
        this.pubblication = pubblication;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="manuscriptScan")
    public Set<ManuscriptTranscription> getManuscriptTranscriptions() {
        return this.manuscriptTranscriptions;
    }
    
    public void setManuscriptTranscriptions(Set<ManuscriptTranscription> manuscriptTranscriptions) {
        this.manuscriptTranscriptions = manuscriptTranscriptions;
    }




}


