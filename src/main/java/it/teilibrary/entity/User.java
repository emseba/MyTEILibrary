package it.teilibrary.entity;
// Generated 9-set-2016 11.00.18 by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * User generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "user", catalog = "mydb", uniqueConstraints = @UniqueConstraint(columnNames = "email")
)
public class User implements java.io.Serializable {

    private UserId id;
    private Role role;
    private String email;
    private String password;
    private Date createTime;
    private Set<ManuscriptTranscription> manuscriptTranscriptions = new HashSet<ManuscriptTranscription>(0);
    private Set<ManuscriptScan> manuscriptScans = new HashSet<ManuscriptScan>(0);

    public User() {
    }

    public User(UserId id, Role role, String email, String password) {
        this.id = id;
        this.role = role;
        this.email = email;
        this.password = password;
    }

    public User(UserId id, Role role, String email, String password, Date createTime, Set<ManuscriptTranscription> manuscriptTranscriptions, Set<ManuscriptScan> manuscriptScans) {
        this.id = id;
        this.role = role;
        this.email = email;
        this.password = password;
        this.createTime = createTime;
        this.manuscriptTranscriptions = manuscriptTranscriptions;
        this.manuscriptScans = manuscriptScans;
    }

    @EmbeddedId

    @AttributeOverrides({
        @AttributeOverride(name = "username", column = @Column(name = "username", nullable = false, length = 16)),
        @AttributeOverride(name = "roleIdrole", column = @Column(name = "role_idrole", nullable = false))})
    public UserId getId() {
        return this.id;
    }

    public void setId(UserId id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "role_idrole", nullable = false, insertable = false, updatable = false)
    public Role getRole() {
        return this.role;
    }

    public void setRole(Role role) {
        this.role = role;
    }

    @Column(name = "email", unique = true, nullable = false)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Column(name = "password", nullable = false, length = 32)
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "create_time", length = 19)
    public Date getCreateTime() {
        return this.createTime;
    }

    public void setCreateTime(Date createTime) {
        this.createTime = createTime;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
    public Set<ManuscriptTranscription> getManuscriptTranscriptions() {
        return this.manuscriptTranscriptions;
    }

    public void setManuscriptTranscriptions(Set<ManuscriptTranscription> manuscriptTranscriptions) {
        this.manuscriptTranscriptions = manuscriptTranscriptions;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
    public Set<ManuscriptScan> getManuscriptScans() {
        return this.manuscriptScans;
    }

    public void setManuscriptScans(Set<ManuscriptScan> manuscriptScans) {
        this.manuscriptScans = manuscriptScans;
    }

    @Override
    public String toString() {
        return id.getUsername();
    }
}
